package DataStructures;

import java.util.ArrayList;
import java.util.LinkedList;

public class LS_Collection {
	LinkedList<DoublyLinkedList> LS;	// LSi
	int n;						// |pointSet|
	int dimensionSize;
	
	public LS_Collection(LinkedList<double []> pointSet, int dimension) {
		LS = new LinkedList<DoublyLinkedList>();
		n = pointSet.size();
		dimensionSize = dimension;
		
		DoublyLinkedList temp = new DoublyLinkedList(dimension);
		LinkedList<DoublyLinkedListIterator> iterators = new LinkedList<DoublyLinkedListIterator>();
		
		// add points to LS
		for(double[] point : pointSet) { temp.add(point); }
		
		// set LSi's, and LSi iterators
		for(int i=0; i < dimension; i++) {
			LS.add(temp.clone());
			iterators.add(temp.iterator());
		}
		
		// iterate pointset, and set cross pointers
		while(iterators.getFirst().hasNext()) {
			
			// cross pointers list
			ArrayList<PointNode> pointers = new ArrayList<PointNode>(); 
			
			for(DoublyLinkedListIterator dlli : iterators) {
				
				// add point from each dimension to pointers list
				pointers.add(dlli.next());
			}
			
			// for each dimension set cross pointers list
			for(PointNode pNode : pointers) { pNode.setCrossPointers(pointers); }
		}
		
		// sort each LSi by dimension
		for(int i = 0; i < dimension; i++) { LS.get(i).sort(i); }
	}
	
	private LS_Collection(LinkedList<DoublyLinkedList> _LS, int _dimension, int _n) {
		this.LS = _LS;
		this.n= _n;
		this.dimensionSize = _dimension;
	}
	
	public DoublyLinkedList getLSi(int i) { return LS.get(i); }
	public LinkedList<DoublyLinkedList> getLS() { return LS; }
}
	
	public LinkedList<Point> getLSAt(int i) { return LS.get(i); }
	public List<LinkedList<Point>> getLS() { return LS; }
	public int getDimensions() { return this.dimensionSize; }
	
	// Given the dimension of the hyperplane
	public void splitCollection(int hyperplaneIndex) {
		
	}
	
	// Remove 
	public void remove() {
		
	}
	
	public Collection_LS clone() {
		LinkedList<LinkedList<Point>> _LS = new LinkedList<LinkedList<Point>>();
		for(LinkedList<Point> L : this.LS) {
			LinkedList<Point> _LSI = new LinkedList<Point>();
			for(Point p : L) { _LSI.add(p); }
			_LS.add(_LSI);
		}
		return new Collection_LS(_LS, this.n);
	}
	
	public String toString() {
		String out = "{\n";
		for(LinkedList<Point> LSi : this.LS) {
			out += Arrays.toString(LSi.toArray()) + ",\n";
		}
		return out + "}";
	}
