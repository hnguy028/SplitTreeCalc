package DataStructures;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class DoublyLinkedList implements List<PointNode> {
	private PointNode head;
	private PointNode tail;
	private int size;
	
	public DoublyLinkedList() {
		this.head = null;
		this.tail = null;
		this.size = 0;
	}
	
	public void add(double[] coords) {
		PointNode temp = new PointNode(coords);
		if(head == null || tail == null) {
			head = temp; 
			tail = temp;
		} else { 
			tail.setNext(temp);
			tail = temp;
		}
		size++;
	}
	
	public void add(double[] coords, int index) throws Exception {
		throw new Exception("Should implement");
	}
	
	public PointNode get(int index) {
		if(index < 0 || this.size < 1 || index >= this.size) { throw new ArrayIndexOutOfBoundsException(); }
		
		PointNode temp = this.head;
		
		for(int i = 0; i < index; i++) { temp = temp.getNext(); }
		
		return temp;
	}
	
	@Override
	public PointNode remove(int index) {
		if(index < 0 || this.size < 1 || index >= this.size) { throw new ArrayIndexOutOfBoundsException(); }
		
		PointNode temp = this.head;
		
		for(int i = 0; i < index; i++) { temp = temp.getNext(); }
		
		PointNode _prev = temp.getPrev();
		PointNode _next = temp.getNext();
		
		_prev.setNext(_next);
		this.size--;
		return temp;
	}
	
	public int size() { return this.size; }
	
	public String toString() {
		String out = "[";
		
		PointNode temp = this.head;
		
		for(int i = 0; i < size; i++) { 
			System.out.println(temp.toString());
			out += (i == size-1) ? temp.toString() : temp.toString() + ", "; 
			temp = temp.getNext(); 
		}
		
		return out + "]";
	}
	
	public void print() { System.out.println(this.toString()); }

	@Override
	public boolean add(PointNode e) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void add(int index, PointNode element) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean addAll(Collection<? extends PointNode> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addAll(int index, Collection<? extends PointNode> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean contains(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int indexOf(Object o) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterator<PointNode> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int lastIndexOf(Object o) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ListIterator<PointNode> listIterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ListIterator<PointNode> listIterator(int index) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean remove(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean retainAll(Collection<?> c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public PointNode set(int index, PointNode element) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<PointNode> subList(int fromIndex, int toIndex) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <T> T[] toArray(T[] a) {
		// TODO Auto-generated method stub
		return null;
	}
}
