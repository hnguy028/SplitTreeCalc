import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import javax.security.auth.callback.LanguageCallback;

import Objects.*;
import Objects.HyperRectangle;
import DataStructures.*;

public class Main {
	public static void main(String[] args) {
		int dimension_size = 2;

		double[] a = new double[]{0.0, 0.0};
		double[] b = new double[]{1.0, 10.0}; 
		double[] c = new double[]{3.0/2.0, 1.0}; 
		double[] d = new double[]{2.0, 5.0/2.0}; 
		double[] e = new double[]{8.0, 7.0}; 
		double[] f = new double[]{11.0, 2.0};
		double[] g = new double[]{11.0, 9.0};
		double[] h = new double[]{12.0 ,0.0};
		
		Point A = new Point(0.0, 0.0);
		Point B = new Point(1.0, 10.0); 
		Point C = new Point(3.0/2.0, 1.0); 
		Point D = new Point(2.0, 5.0/2.0); 
		Point E = new Point(8.0, 7.0); 
		Point F = new Point(11.0, 2.0); 
		Point G = new Point(11.0, 9.0);
		Point H = new Point(12.0 ,0.0);
		
		LinkedList<Point> S = new LinkedList<Point>(Arrays.asList(A, B, C, D, E, F, G, H));
		LinkedList<double[]> pointSet = new LinkedList<double[]>(Arrays.asList(a, b, c, d, e, f, g, h));
		
		DoublyLinkedList LS1 = new DoublyLinkedList(2);
		LS1.add(A.getCoordinates());
		LS1.add(B.getCoordinates());
		LS1.add(C.getCoordinates());
		LS1.add(D.getCoordinates());
		LS1.add(E.getCoordinates());
		LS1.add(F.getCoordinates());
		LS1.add(G.getCoordinates());
		LS1.add(H.getCoordinates());
		
		DoublyLinkedList LS2 = LS1.clone();
		
		LS_Collection coll = new LS_Collection(pointSet, 2);
		LS_Collection coll2 = coll.clone();
		
		coll.print();
		coll2.print();
		System.out.println();
	
		for(DoublyLinkedList dll : coll.getLS()) {
			DoublyLinkedListIterator iter = dll.iterator();
			
			while(iter.hasNext()) {
				for( PointNode p : iter.next().getCrossPointers()) {
					p.printString();
				}
			}
		}
		
		coll.print();
		coll2.print();
		
	}
	
	public void partialSplitTree(List<Point> S, HyperRectangle R, List<Point> LS) {
		
	}
	
	public void preProcess(List<Point> _pointSet, int _dimension) {
		// create d, linkedlists from point set each sorted wrt to the dimension
		LinkedList<Point>[] LS = new LinkedList[_dimension];
		
		for(LinkedList<Point> LSI : LS) {
			;
		}
	}
	
	public void fastSplitTree(List<Point> S, HyperRectangle R) {
		if(S.size() <= 1) { splitTreeCardOne(S, R); }
		
		
	}
	
	public void splitTreeCardOne(List<Point> S, HyperRectangle R) {
		// if |S| == 1
		
		
		// create a node u
		// Node u;
		
		// bounding box R(u) = R(S)
		
		// rectangle containing bounding box Ro(u) = R
		
		// Store with u the only point of S, Ro(u), R(u)
		
		// set u's pointers to null
		
		// return u;
	}
}
